{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 TrebuchetMS;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10720\viewh14940\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs20 \cf0 Christine Rhee\
Project 7\
\
Seam Carving\
\
My implementation of SeamCarving allows user input to get rid of/keep certain pixels.  In addition, it can shrink and grow images.\
\
The overall method of carving or adding seams follows the following sequence:\
1. Find the gradient of the image with an edge detection (my implementation uses laplacezero).\
2. Finds the paths to take in the image\
3. Mark the path to add or get rid of with markPath.\
4. Add or cut the path with addPath and cutPath, respectively.\
\
My code is condensed!  I have one while loop to cut the columns and rows.\
This while loop first checks if the user wants to cut out certain columns and rows.  Then, it calculates the paths and weights of the paths with getPathsF.m.  Then, it finds the minimum weight (the path with least energy), marks the path with markPath.m, and either adds or cuts the path depending on the user's indicated new width/height.\
Once the columns have been seamed, the image is rotated and the rows are the new columns.  The whole procedure repeats on this rotated image.\
\
Making images smaller/bigger:\
Use 
\b seamCarve.m 
\b0 with 
\b getPathsSimple.m, sobelseam.m, markPath.m, addPath.m, 
\b0 and 
\b cutPath.m
\b0 .\

\b CODE:  seamCarveSimple.m\
	getPathsSimple.m\
	sobelseam.m\
	markPath.m\
	addPath.m\
	cutPath.m\
IMAGE: cat-skinnier taller\
	cat-wider shorter\
	cat-wider taller\
	cat-skinnier shorter
\b0 \
\
Cutting out images:\
In order to carve out images, simply change the sobelseam to laplacezero and use
\b  getPathsMasks.m
\b0 .\
This uses all the code from above but the following in addition:\

\b CODE
\b0 : 
\b 	getPathsMasks.m\
	laplacezero.m\
	stretch.m\
	stretchlzero.m\
IMAGE: gopher\
	pond
\b0 \
\
\ul sobelseam.m\ulnone : uses the sobel edge detection and outputs a gradient\
\
\ul laplacezero.m\ulnone : uses the laplace zero edge detection and outputs a gradient\
\
\ul getPaths.m\ulnone : takes in the original image and \
\
\ul markPath.m\ulnone : marks the path to take using the path image from getPaths and the original image to seam\
\
\ul addPath.m\ulnone : adds a seam into the image by taking the average of the left and right pixels and its original self.\
\
\ul cutPath.m\ulnone : cuts a seam out of the image by individually adding the pixels before the seam and then just shifting the rest of the pixels one over after the seam\
\
\ul findW.m\ulnone : used in the automation part of deleting an object in the image.  It automatically finds how much to shrink the image in order to get rid of the object.\
\

\b IMAGE:\

\b0 Folder 1: cat-skinnier/shorter:\
	I made the cat skinnier and shorter just to show that the important content is kept.\
Folder 2: cat-wider/taller:\
	I made the cat wider and taller just to show that the important content isn't stretched.\
Folder 3: gopher:\
	I made a mask with the object to cut out in black and used that to cut out the gopher that was photobombing the other two :)\
\
}